<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="myPageMapper">

<!-- 공용 정보 -->
	<!-- 물품 1개 정보 가져오기 -->
	<select id="searchProduct" parameterType="Integer" resultType="com.chan.dto.MyPageDTO">
		select product_id,product_subject,product_resultPrice,product_discount,product_price,product_mainSaveFileName from product where product_id=#{product_id}
	</select>
	
	<!-- 1개의 임시 데이터 조회 -->
	<select id="joinData" resultType="com.chan.dto.MyPageDTO" parameterType="String">
		select join_id,join_password,join_name,join_phone,join_email,join_recommender,join_snsAgree,join_emailAgree,
		join_point,join_addrNum,join_addr1,join_addr2 from join where join_id=#{join_id,jdbcType=VARCHAR}
	</select>
	
<!-- //공용 정보 -->
<!-- main Page -->
	
	<!-- 1:1 상담 내역 불러오기(count) -->
	<select id="consultingData" resultType="Integer" parameterType="string">
		select nvl(count(*),0) from qna where join_id=#{join_id,jdbcType=VARCHAR} and qna_state='미답변'
	</select>
	
	<!-- 주문/배송 내역 불러오기(count) -->
	<select id="orderListData" resultType="Integer" parameterType="string">
		select nvl(count(*),0) from orderList where join_id=#{join_id} and (orderList_step=1 or orderList_step=2 or orderList_step=3 or orderList_step=4)
	</select>
	
	<!-- 쿠폰 갯수 불러오기(count) -->
	<select id="couponData" parameterType="hashMap" resultType="Integer">
		select nvl(count(*),0) from coupon where join_id=#{join_id,jdbcType=VARCHAR} and coupon_use=#{coupon_use} 
	</select>	
	
	<!-- 자주구매상품 -->
	<select id="mainFrequencyList" parameterType="String" resultType="com.chan.dto.MyPageDTO">
		select * from (
		select rownum rnum, data.* from (
		select B.* from (
		select product_id,nvl(count(*),0) orderList_productCount from productOrder A, orderList B where A.orderList_id=B.orderList_id and B.join_id=#{join_id,jdbcType=VARCHAR} group by product_id) A,
		product B where A.product_id=B.product_id order by orderList_productCount desc) data)
		<![CDATA[
		where rnum>=1 and rnum<=3
		]]>
	</select>

<!-- //main Page -->
<!-- 비밀번호 수정 -->
	
	<!-- 비밀번호 수정 -->
	<update id="updatePassword" parameterType="hashMap">
		update join set join_password=#{join_password} where join_id=#{join_id}
	</update>

<!-- //비밀번호 수정 -->
<!-- 구매 후기 -->
	<!-- reivew 작성용 데이터 불러오기 -->
	<select id="commentNoData" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
		select A.orderList_id,productOrder_id,product_id,product_subject,product_mainSaveFileName,orderList_productCount,
		to_char(orderList_created,'YYYY-MM-DD') orderList_created
		from orderList A, productOrder B where A.orderList_id=B.orderList_id and A.join_id=#{join_id}
		and A.orderList_id=#{orderList_id} and productOrder_id=#{productOrder_id}
	</select>
	
	 <!-- review 미작성 데이터 갯수 -->
	<select id="commentNoDataCount" resultType="Integer" parameterType="String">
		select nvl(count(*),0) from reviewCheck where reviewCheck_check=1 and join_id=#{join_id}
	</select>

	<!-- review 작성 데이터 갯수 -->
	<select id="commentDataCount" resultType="Integer" parameterType="String">
		select nvl(count(*),0) from reviewCheck where reviewCheck_check=0 and join_id=#{join_id} 
	</select>

	<!-- review 미작성 데이터 리스트 -->
	<select id="commentNoDataList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
		select * from (
		select rownum rnum, data.* from (
		select reviewCheck_id,reviewCheck_Check,A.orderList_id,B.productOrder_id,product_subject,product_mainSaveFileName,cart_quantity,product_resultPrice
		from reviewCheck A,productOrder B where A.productOrder_id=B.productOrder_id and A.orderList_id=B.orderList_id and A.join_id=#{join_id} and reviewCheck_check=1
		order by reviewCheck_id desc) data)
		<![CDATA[
		where rnum>=#{start} and rnum<=#{end}
		]]>
	</select>

	<!-- review 작성 데이터 리스트 -->
	<select id="commentDataList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
		select * from (
		select rownum rnum, data.* from (
		select review_id,A.point_score,A.product_id,review_subject,review_content,to_char(review_created,'YYYY-MM-DD') review_created,review_grade,review_saveFileName,B.product_subject ,B.product_mainSaveFileName
		from review A,product B where A.product_id=B.product_id and join_id=#{join_id}
		order by review_id desc) data)
		<![CDATA[
		where rnum>=#{start} and rnum<=#{end}
		]]>
	</select>
	
	<!-- 리뷰 id 지정 -->
	<select id="commentMaxId" resultType="Integer">
		select nvl(max(review_id),0) from review
	</select>
	
	<!-- 리뷰 insert -->
	<insert id="commentInsert" parameterType="com.chan.dto.MyPageDTO">
		insert into review
		(review_id,join_id,product_id,review_subject,review_content,review_created,review_grade,review_saveFileName,reviewCheck_id,point_score)
		values (#{review_id},#{join_id,jdbcType=VARCHAR},#{product_id},#{review_subject},#{review_content,jdbcType=VARCHAR},sysdate,#{review_grade},#{review_saveFileName,jdbcType=VARCHAR},#{reviewCheck_id},#{point_score})
	</insert>
	
	<!-- 리뷰 포인트 id 지정 -->
	<select id="pointMaxId" resultType="Integer">
		select nvl(max(point_id),0) from point
	</select>
	
	<!-- 리뷰 point insert -->
	<insert id="commentPointInsert" parameterType="com.chan.dto.MyPageDTO">
		insert into point
		(point_id,join_id,point_score,point_created,point_content,point_use)
		values (#{point_id},#{join_id,jdbcType=VARCHAR},#{point_score},sysdate,#{point_content},1)
	</insert>
	
	<!-- join point select -->
	<select id="joinPointSelect" parameterType="String" resultType="Integer">
		select join_point from join where join_id=#{join_id}
	</select>
	
	<!-- join point update -->
	<update id="joinPointUpdate" parameterType="com.chan.dto.MyPageDTO">
		update join set join_point=#{join_point} where join_id=#{join_id}	
	</update>
	
	<!-- review_check의 check 수정 -->
	<update id="reviewCheck" parameterType="Integer">
		update reviewCheck set reviewCheck_check=0 where reviewCheck_id=#{reviewCheck_id}
	</update>
	
	<!-- 리뷰에 따른 like점수 -->
	<!-- 상품의 리뷰 갯수 -->
	<select id="reviewCount" parameterType="int" resultType="int">
		select count(*) from review
		where product_id = #{product_id}
	</select>

	<!-- 상품의 리뷰 점수 -->
	<select id="reviewGrade" parameterType="int" resultType="com.chan.dto.MyPageDTO">
		select review_grade from review
		where product_id = #{product_id}
	</select>
	
	<!-- 상품의 점수 변경 -->
	<update id="productGradeUpdate" parameterType="map">
		update product set product_like = #{product_like}
		where product_id = #{product_id}
	</update>
	<!-- //리뷰에 따른 like점수 -->
	
<!-- //구매 후기 -->
<!-- 쿠폰 리스트 -->

	<!-- 쿠폰 리스트 확인 -->
	<select id="couponList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
		select * from (
		select rownum rnum, data.* from (
		select coupon_id,coupon_price,to_char(coupon_startDate,'YYYY-MM-DD') coupon_startDate,to_char(coupon_endDate,'YYYY-MM-DD') coupon_endDate 
		from coupon where join_id=#{join_id} and coupon_use=#{coupon_use}
		order by coupon_id desc) data)
		<![CDATA[
		where rnum>=#{start} and rnum<=#{end}
		]]>
	</select>
	
<!-- //쿠폰 리스트 -->
<!-- point 리스트 -->
	
	<!-- point 갯수 불러오기 -->
	<select id="pointDataCount" parameterType="String" resultType="Integer">
		select nvl(count(*),0) from point where join_id=#{join_id} 
	</select>
	
	<!-- point use 갯수 불러오기 -->
	<select id="pointUseDataCount" parameterType="hashMap" resultType="Integer">
		select nvl(count(*),0) from point where join_id=#{join_id} and point_use=#{point_use}
	</select>
	
	<!-- point 리스트 확인 -->
	<select id="pointList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
		select * from (
		select rownum rnum, data.* from (
		select point_id,join_id,point_score,to_char(point_created,'YYYY-MM-DD') point_created,point_content,point_use 
		from point where join_id=#{join_id}
		order by point_id desc) data)
		<![CDATA[
		where rnum>=#{start} and rnum<=#{end}
		]]>
	</select>
	
	<!-- point 사용 구분 리스트 확인 -->
	<select id="pointUseList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
		select * from (
		select rownum rnum, data.* from (
		select point_id,join_id,point_score,to_char(point_created,'YYYY-MM-DD') point_created,point_content,point_use 
		from point where join_id=#{join_id} and point_use=#{point_use}
		order by point_id desc) data)
		<![CDATA[
		where rnum>=#{start} and rnum<=#{end}
		]]>
	</select>

<!-- //point 리스트 -->
<!-- 회원 정보 수정 -->
	
	<!-- 1명 회원 정보 검색 -->
	<select id="infoSearchData" resultType="com.chan.dto.MyPageDTO" parameterType="String">
		select join_id,join_password,join_name,join_phone,join_email,join_recommender,join_snsAgree,join_emailAgree,
		join_point,join_addrNum,join_addr1,join_addr2,to_char(join_created,'YYYY-MM-DD HH:mm') join_created from join where join_id=#{join_id}
	</select>
	
	<!-- 1명 회원 정보 수정 -->
	<update id="infoUpdateData" parameterType="hashMap">
		update join set join_phone=#{join_phone,jdbcType=VARCHAR},join_addrNum=#{join_addrNum,jdbcType=VARCHAR},join_addr1=#{join_addr1,jdbcType=VARCHAR},join_addr2=#{join_addr2,jdbcType=VARCHAR},join_email=#{join_email,jdbcType=VARCHAR} where join_id=#{join_id,jdbcType=VARCHAR}
	</update>

<!-- //회원 정보 수정 -->
<!-- 자주 찾는 물품 리스트 -->

	<!-- 회원 구매 물품 -->
	<select id="orderListCount" parameterType="String" resultType="Integer">
		select nvl(count(distinct product_id),0) from productOrder where join_id=#{join_id,jdbcType=VARCHAR}
	</select>

	<!-- 물품 정보 리스트 -->
	<select id="frequencyList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
		select * from (
		select rownum rnum, data.* from (
		select B.* from (select product_id,nvl(count(*),0) product_count from productOrder where join_id=#{join_id,jdbcType=VARCHAR} group by product_id) A,product B where A.product_id=B.product_id
		order by product_count desc) data)
		<![CDATA[
		where rnum>=#{start} and rnum<=#{end}
		]]>
	</select>

<!-- //자주 찾는 물품 리스트 -->
<!-- 상품 문의 내역 -->

	<!-- 상품 문의 갯수 -->
		<select id="productQuestionCount" parameterType="String" resultType="Integer">
			select nvl(count(*),0) from productQuestion where join_id=#{join_id,jdbcType=VARCHAR}
		</select>

	<!-- 상품 문의 리스트 -->
		<select id="productQuestionList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
			select * from (
			select rownum rnum, data.* from (
			select productQuestion_id,join_id,product_id,productQuestion_type,productQuestion_state,
			productQuestion_content,to_char(productQuestion_created,'YYYY-MM-DD') productQuestion_created,
			productQuestion_secret from productQuestion where join_id=#{join_id}
			order by productQuestion_id desc) data)
			<![CDATA[
			where rnum>=#{start} and rnum<=#{end}
			]]>
		</select>
		
	<!-- 상품 문의 내역 삭제 -->
		<delete id="productQuestionDelete" parameterType="hashMap">
			delete productQuestion where join_id=#{join_id} and productQuestion_id=#{productQuestion_id}
		</delete>
		
	<!-- 상품 답변 확인 -->
		<select id="productAnswerList" resultType="com.chan.dto.MyPageDTO">
			select a.productAnswer_id,a.product_id,a.productQuestion_id,to_char(a.productAnswer_created,'YYYY.MM.DD') as productAnswer_created,a.productAnswer_content
			from productAnswer a, productQuestion b
			where a.productQuestion_id = b.productQuestion_id and b.productQuestion_id = #{productQuestion_id}
		</select>	

<!-- //상품 문의 내역 -->
<!-- 1:1 상품 문의 -->

	<!-- 1:1 문의 갯수 -->
		<select id="qnaCount" parameterType="String" resultType="Integer">
			select nvl(count(*),0) from qna where join_id=#{join_id,jdbcType=VARCHAR}
		</select>

	<!-- 1:1 문의 리스트 -->
		<select id="qnaList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
			select * from (
			select rownum rnum, data.* from (
			select qna_id,join_id,qna_select,qna_type,qna_state,qna_subject,qna_content,to_char(qna_created,'YYYY-MM-DD') qna_created,qna_saveFileName from qna where join_id=#{join_id}
			order by qna_id desc) data)
			<![CDATA[
			where rnum>=#{start} and rnum<=#{end}
			]]>
		</select>
		
	<!-- 1:1 문의 내역 삭제 -->
		<delete id="qnaDelete" parameterType="hashMap">
			delete qna where join_id=#{join_id} and qna_id=#{qna_id}
		</delete>
	
	<!-- 1:1 문의 id 구하기 -->	
		<select id="qnaMaxNum" resultType="Integer">
 			select nvl(max(qna_id),0) from qna
 		</select>

	<!-- 1:1 문의 내역 삽입 -->
		<insert id="insertqna" parameterType="com.chan.dto.MyPageDTO">
			insert into qna (qna_id,join_id,qna_select,qna_type,qna_subject,qna_content,qna_created,qna_state,qna_saveFileName,qna_store)
			values (#{qna_id},#{join_id},#{qna_select},#{qna_type},#{qna_subject},#{qna_content},sysdate,#{qna_state},#{qna_saveFileName},#{qna_store})
		</insert>
		
	<!-- 1:1 1개 정보 가져오기 -->
	<select id="qnaGetReadData" parameterType="Integer" resultType="com.chan.dto.MyPageDTO">
 		select qna_id,qna_select,qna_type,qna_id,qna_subject,qna_content ,qna_saveFileName,qna_store,qna_reply
 		from qna where qna_id=#{qna_id}
 	</select>

<!-- //1:1 상품문의 -->
<!-- 주문/배송 내역 -->

	
<!-- 총 주문 갯수 -->
		<select id="orderCount" parameterType="String" resultType="Integer">
			select nvl(count(*),0) from orderList where join_id=#{join_id} and (orderList_step=1 or orderList_step=2 or orderList_step=3 or orderList_step=4 or orderList_step=5 or orderList_step=6)
		</select>
		
	<!-- 주문 리스트 -->
		<select id="orderList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
			select * from (
			select rownum rnum, data.* from (
			select A.orderList_id,productOrder_id,join_id,B.product_id,A.orderList_resultPrice,B.product_subject,coupon_id,point_id,to_char(orderList_created,'YYYY-MM-DD') orderList_created,orderList_naturePackage,orderList_recyclePackage,orderList_step,cart_quantity,orderList_productCount
			from orderList A,(select productOrder_id,orderList_id,product_subject,cart_quantity,product_id,product_resultPrice from productOrder) B 
			where A.orderList_id=B.orderList_id and join_id=#{join_id} and productOrder_id=1
			and (orderList_step=1 or orderList_step=2 or orderList_step=3 or orderList_step=4 or orderList_step=5 or orderList_step=6)
			order by orderList_id desc) data)
			<![CDATA[
			where rnum>=#{start} and rnum<=#{end}
			]]>
		</select>
	<!-- 주문취소/환불 신청 -->
		<update id="orderApply" parameterType="hashMap">
			update orderList set orderList_step=#{orderList_step} where join_id=#{join_id} and orderList_id=#{orderList_id}
		</update>

<!-- //주문/배송 내역 -->
<!-- 주문취소 내역 -->

	<!-- 총 주문 갯수 -->
		<select id="cancelCount" parameterType="String" resultType="Integer">
			select nvl(count(*),0) from orderList where join_id=#{join_id} and orderList_step=0
		</select>
		
	<!-- 주문 리스트 -->
		<select id="cancelList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
			select * from (
			select rownum rnum, data.* from (
			select A.orderList_id,productOrder_id,join_id,B.product_id,A.orderList_resultPrice,B.product_subject,coupon_id,point_id,to_char(orderList_created,'YYYY-MM-DD') orderList_created,orderList_naturePackage,orderList_recyclePackage,orderList_step,cart_quantity,orderList_productCount
			from orderList A,(select productOrder_id,orderList_id,product_subject,cart_quantity,product_id,product_resultPrice from productOrder) B 
			where A.orderList_id=B.orderList_id and join_id=#{join_id} and productOrder_id=1
			and orderList_step=0
			order by orderList_id desc) data)
			<![CDATA[
			where rnum>=#{start} and rnum<=#{end}
			]]>
		</select>

<!-- //주문취소 내역 -->
<!-- 교환/반품 내역 -->

<!-- 총 주문 갯수 -->
	<select id="refundCount" parameterType="String" resultType="Integer">
		select nvl(count(*),0) from orderList where join_id=#{join_id} and (orderList_step=7 or orderList_step=8 or orderList_step=9)
	</select>
	
<!-- 주문 리스트 -->
	<select id="refundList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
		select * from (
		select rownum rnum, data.* from (
		select A.orderList_id,productOrder_id,join_id,B.product_id,A.orderList_resultPrice,B.product_subject,coupon_id,point_id,to_char(orderList_created,'YYYY-MM-DD') orderList_created,orderList_naturePackage,orderList_recyclePackage,orderList_step,cart_quantity,orderList_productCount
		from orderList A,(select productOrder_id,orderList_id,product_subject,cart_quantity,product_id,product_resultPrice from productOrder) B 
		where A.orderList_id=B.orderList_id and join_id=#{join_id} and productOrder_id=1
		and (orderList_step=7 or orderList_step=8 or orderList_step=9)
		order by orderList_id desc) data)
		<![CDATA[
		where rnum>=#{start} and rnum<=#{end}
		]]>
	</select>

<!-- //교환/반품 내역 -->
<!-- 찜 내역 -->
	
		<!-- 찜 갯수 -->
		<select id="zzimCount" parameterType="String" resultType="Integer">
			select nvl(count(*),0) from zzimList where join_id=#{join_id}
		</select>
		
		<!-- 찜 리스트 -->
		<select id="zzimList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
			select * from (
			select rownum rnum, data.* from (
			select * from zzimList where join_id=#{join_id}
			order by zzimList_id desc) data)
			<![CDATA[
			where rnum>=#{start} and rnum<=#{end}
			]]>
		</select>
		
		<!-- 찜 삭제 -->
		<delete id="zzimDelete" parameterType="hashMap">
			delete zzimList where join_id=#{join_id} and product_id=#{product_id}
		</delete>
		
		<!-- 장바구니 담기 -->
		<insert id="insertCart" parameterType="com.chan.dto.MyPageDTO">
		insert into cart(cart_id,join_id,product_id,product_subject,product_mainSaveFileName,
		product_price,product_discount,product_resultPrice,cart_quantity)
		values ((select nvl(max(cart_id),0) from cart)+1,#{join_id},#{product_id},#{product_subject},#{product_mainSaveFileName},
		#{product_price},#{product_discount},#{product_resultPrice},1)
		</insert>

<!-- //찜 내역 -->

<!-- 환불서비스 -->
		<!-- 환불 상품 갯수 -->
		<select id="refundPossibleCount" parameterType="hashMap" resultType="Integer">
			select nvl(count(*),0) from orderList where join_id=#{join_id} and orderList_step=#{orderList_step}
		</select>
		
		<!-- 환불 가능 리스트 -->
		<select id="refundPossibleList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
			select * from (
			select rownum rnum, data.* from (
			select A.orderList_id,product_mainSaveFileName,productOrder_id,join_id,B.product_id,A.orderList_resultPrice,B.product_subject,coupon_id,point_id,to_char(orderList_created,'YYYY-MM-DD') orderList_created,orderList_naturePackage,orderList_recyclePackage,orderList_step,cart_quantity,orderList_productCount
			from orderList A,(select product_mainSaveFileName,orderList_id,product_subject,cart_quantity,product_id,product_resultPrice,productOrder_id from productOrder) B 
			where A.orderList_id=B.orderList_id and orderList_step=#{orderList_step} and join_id=#{join_id} and productOrder_id=1
			order by orderList_id desc) data)
			<![CDATA[
			where rnum>=#{start} and rnum<=#{end}
			]]>
		</select>

		<!-- 환불 완료/반품 갯수 -->
		<select id="refundProductCount" parameterType="String" resultType="Integer">
			select nvl(count(*),0) from orderList where join_id=#{join_id} and (orderList_step=8 or orderList_step=9)
		</select>
		
		<!-- 환불 완료/반품 리스트 -->
		<select id="refundProductList" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
			select * from (
			select rownum rnum, data.* from (
			select A.orderList_id,join_id,productOrder_id,product_mainSaveFileName,B.product_id,A.orderList_resultPrice,B.product_subject,coupon_id,point_id,to_char(orderList_created,'YYYY-MM-DD') orderList_created,orderList_naturePackage,orderList_recyclePackage,orderList_step,cart_quantity,orderList_productCount
			from orderList A,(select distinct orderList_id,product_mainSaveFileName,product_subject,cart_quantity,product_id,product_resultPrice,productOrder_id from productOrder) B 
			where A.orderList_id=B.orderList_id and join_id=#{join_id} and productOrder_id=1
			and (orderList_step=8 or orderList_step=9)
			order by orderList_id desc) data)
			<![CDATA[
			where rnum>=#{start} and rnum<=#{end}
			]]>
		</select>
		
		<!-- 환불 1개 주문 정보 -->
		<select id="refundOrderData" parameterType="hashMap" resultType="com.chan.dto.MyPageDTO">
			select A.orderList_id,productOrder_id,product_mainSaveFileName,join_id,B.product_id,A.orderList_resultPrice,B.product_subject,coupon_id,point_id,to_char(orderList_created,'YYYY-MM-DD') orderList_created,orderList_naturePackage,orderList_recyclePackage,orderList_step,cart_quantity,orderList_productCount
			from orderList A,(select orderList_id,product_mainSaveFileName,product_subject,cart_quantity,product_id,product_resultPrice,productOrder_id from productOrder) B 
			where A.orderList_id=B.orderList_id and orderList_step=5 and join_id=#{join_id} and A.orderList_id=#{orderList_id} and productOrder_id=1
			order by orderList_id desc
		</select>
		
		<!-- 환불 요청 삽입-->
		<insert id="refundDataInsert" parameterType="com.chan.dto.MyPageDTO">
			insert into refund
			(orderList_id,join_id,orderList_resultPrice,refund_subject,refund_state,refund_reason,refund_saveFileName,refund_created)
			values (#{orderList_id},#{join_id},#{orderList_resultPrice},#{refund_subject},#{refund_state},#{refund_reason},#{refund_saveFileName},sysdate)
		</insert>


<!-- //환불서비스 -->
 
</mapper>